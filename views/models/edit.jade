extend ../layout
block content
  script(src="/vendor/gl-matrix2.js")
  script(src="/vendor/webgl-utils.js")
  script(src="/vendor/jquery-2.js")

  script(src="/glviewer/obj-module.js")
  script(id="shader-fs", type="x-shader/x-fragment").
    precision mediump float;

    varying vec2 vTextureCoord;
    varying vec2 vReflectiveTextureCoord;
    varying vec3 vPosition;
    varying vec3 vNormal;

    uniform vec3 lightPosition;

    uniform vec3 uAmbientColor;


    void main(void) {
        vec3 defaultLight = vec3(.8,.8,.8);
        vec3 lightIntensity;
        vec4 roughTextureColor = vec4(1,1,1,1);
        vec3 textureTotals = vec3( 0.5, 0.5, 0.5);

        vec3 eyeDirection = normalize(-vPosition);
        
        vec3 lightDirectionWithRespectToVertex = -normalize(vPosition - lightPosition);
        vec3 reflectionDirection = reflect(-lightDirectionWithRespectToVertex, vNormal);

        float directionalLightWeighting = max(dot(vNormal, lightDirectionWithRespectToVertex), 0.0);

        float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), 25.0);

        lightIntensity = uAmbientColor + defaultLight * directionalLightWeighting + defaultLight * 1.0 * specularLightWeighting;
        //gl_FragColor = vec4(textureTotals * vLightWeighting + vec3(0.6,0.6,0.6) * specularLightWeighting, roughTextureColor.a);
        gl_FragColor = vec4(textureTotals * lightIntensity, roughTextureColor.a);
    }
  script(id="shader-vs", type="x-shader/x-vertex").
    attribute vec3 aVertexPosition;
    attribute vec3 aVertexNormal;
    attribute vec2 aTextureCoord;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    uniform mat3 uNMatrix;

    uniform vec3 lightPosition;

    uniform vec3 uAmbientColor;

    uniform vec3 uLightingDirection;
    uniform vec3 uDirectionalColor;

    varying vec2 vTextureCoord;
    varying vec2 vReflectiveTextureCoord;
    varying vec3 vLightWeighting;
    varying vec3 vPosition;
    varying vec3 vNormal;

    void main(void) {
        vPosition = (uMVMatrix * vec4(aVertexPosition, 1.0)).xyz;
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vec3 transformedNormal = uNMatrix * aVertexNormal;
        vNormal = transformedNormal;
        vTextureCoord = aTextureCoord;
        vReflectiveTextureCoord = vec2(0.5, 0.5) + vec2(transformedNormal[0]*.5, transformedNormal[1]*.5);        
    }
  script.
    var modelURL = "/uploads/" + '#{model_URL}';
    $( document ).ready( function(){
            webGLStart();
        } );
  h2 #{model.name}
  p
    | #{model.description}
  p 
    | by 
    a(href='/users/#{model.creator}') #{model.creator}
  div
    a(class="pure-button pure-button-primary", href="#") Buy Now $#{model.price}
  div
    | views: #{model.views}
  div
    canvas.gl-player(id="my-canvas", width="800px", height="400px", onload="webGLStart();")
  form.pure-form
    label.pure-radio(for="option-two")
      input(id="public", type="radio", name="optionsRadios", value="option1")
        | Public
      input(id="private", type="radio", name="optionsRadios", value="option1", checked)
        | Private
      button.pure-button.pure-button-primary(type="submit") Apply