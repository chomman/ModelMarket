script(id="shader-fs", type="x-shader/x-fragment").
  precision mediump float;

  varying vec3 vPosition;
  varying vec3 vNormal;

  uniform vec3 lightPosition;
  uniform vec3 uAmbientColor;


  void main(void) {
      vec3 defaultLight = vec3(.5,.7,1.0);
      vec3 lightIntensity;
      vec4 roughTextureColor = vec4(1,1,1,1.0);
      vec3 textureTotals = vec3( 0.5, 0.5, 0.5);

      vec3 eyeDirection = normalize(-vPosition);
      
      vec3 lightDirectionWithRespectToVertex =normalize(vec3(0.2, 1.0, 0.2));//normalize(vPosition - lightPosition);
      vec3 reflectionDirection = reflect(-lightDirectionWithRespectToVertex, vNormal);

      float phongShading = max(dot(normalize(vNormal), lightDirectionWithRespectToVertex), 0.2);

      float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), 25.0);

      lightIntensity = defaultLight * phongShading;// + defaultLight * 0.0 * specularLightWeighting;
      //gl_FragColor = vec4(textureTotals * vLightWeighting + vec3(0.6,0.6,0.6) * specularLightWeighting, roughTextureColor.a);
      gl_FragColor = vec4(lightIntensity, 1.0);
  }
script(id="shader-vs", type="x-shader/x-vertex").
  attribute vec3 aVertexPosition;
  attribute vec3 aVertexNormal;

  uniform mat4 uMVMatrix;
  uniform mat4 uPMatrix;
  uniform mat3 uNMatrix;

  varying vec3 vPosition;
  varying vec3 vNormal;


  void main(void) {
      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
      vPosition = (uMVMatrix * vec4(aVertexPosition, 1.0)).xyz;
      vec3 transformedNormal = uNMatrix * aVertexNormal;
      vNormal = transformedNormal;
  }
